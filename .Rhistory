# effective field goal percentages ----
euro_box_team_stats$off_eff_fg <-
(euro_box_team_stats$team_fgm + 0.5*euro_box_team_stats$team_fg3m)/euro_box_team_stats$team_fga
euro_box_team_stats$def_eff_fg <-
(opponent_stat(euro_box_team_stats$team_fgm) + 0.5*opponent_stat(euro_box_team_stats$team_fg3m))/opponent_stat(euro_box_team_stats$team_fga)
# turnover percentage ----
euro_box_team_stats$off_tov_perc <-
euro_box_team_stats$team_tov / (euro_box_team_stats$team_fga + 0.44 * euro_box_team_stats$team_fta + euro_box_team_stats$team_tov)
euro_box_team_stats$def_tov_perc <-
opponent_stat(euro_box_team_stats$team_tov) / (opponent_stat(euro_box_team_stats$team_fga) + 0.44 * opponent_stat(euro_box_team_stats$team_fta) + opponent_stat(euro_box_team_stats$team_tov))
# rebounding percentages ----
euro_box_team_stats$off_reb_perc <-
euro_box_team_stats$team_orb / (euro_box_team_stats$team_orb + opponent_stat(euro_box_team_stats$team_drb))
euro_box_team_stats$def_reb_perc <-
euro_box_team_stats$team_drb / (euro_box_team_stats$team_drb + opponent_stat(euro_box_team_stats$team_orb))
# free throw attempt rate ----
euro_box_team_stats$off_FTA_Rate <- euro_box_team_stats$team_ftm / euro_box_team_stats$team_fga
euro_box_team_stats$def_FTA_Rate <- opponent_stat(euro_box_team_stats$team_ftm) / opponent_stat(euro_box_team_stats$team_fga)
# Add Game Date for filtering purposes ----
Game_Date_df <- euro_meta_game %>%
group_by(season_id,game_id) %>%
select(game_date)
Team_Stats_df <- left_join(euro_box_team_stats, Game_Date_df, by = c('season_id' = 'season_id', 'game_id' = 'game_id'))
# create game goals tables ----
# create overall game goals table
Game_Goals_df <- Team_Stats_df %>%
filter(Win == 1) %>%
group_by(team_id) %>%
summarize(mean_off_eff_fg = mean(off_eff_fg),
mean_def_eff_fg = mean(def_eff_fg),
mean_off_tov_perc = mean(off_tov_perc),
mean_def_tov_perc = mean(def_tov_perc),
mean_off_reb_perc = mean(off_reb_perc),
mean_def_reb_perc = mean(def_reb_perc),
mean_off_FTA_Rate = mean(off_FTA_Rate),
mean_def_FTA_Rate = mean(def_FTA_Rate)
)
# Join Game Goals to each row of box_team_stats in order to create binary columns for Goal Achievements
Team_Stats_df <- left_join(Team_Stats_df, Game_Goals_df, by = 'team_id')
# Creating binary columns to identify whether game goals were achieved in individual games
Team_Stats_df$off_eff_fg_GG <- if_else(Team_Stats_df$off_eff_fg >= Team_Stats_df$mean_off_eff_fg, 1, 0)
Team_Stats_df$def_eff_fg_GG <- if_else(Team_Stats_df$def_eff_fg >= Team_Stats_df$mean_def_eff_fg, 1, 0)
Team_Stats_df$off_tov_perc_GG <- if_else(Team_Stats_df$off_tov_perc >= Team_Stats_df$mean_off_tov_perc, 1, 0)
Team_Stats_df$def_tov_perc_GG <- if_else(Team_Stats_df$def_tov_perc >= Team_Stats_df$mean_def_tov_perc, 1, 0)
Team_Stats_df$off_reb_perc_GG <- if_else(Team_Stats_df$off_reb_perc >= Team_Stats_df$mean_off_reb_perc, 1, 0)
Team_Stats_df$def_reb_perc_GG <- if_else(Team_Stats_df$def_reb_perc >= Team_Stats_df$mean_def_reb_perc, 1, 0)
Team_Stats_df$off_FTA_Rate_GG <- if_else(Team_Stats_df$off_FTA_Rate >= Team_Stats_df$mean_off_FTA_Rate, 1, 0)
Team_Stats_df$def_FTA_Rate_GG <- if_else(Team_Stats_df$def_FTA_Rate >= Team_Stats_df$mean_def_FTA_Rate, 1, 0)
# Adding opponent game goals to each row ----
Team_1_df <- Team_Stats_df %>%
filter(Team_1 == TRUE) %>%
select(index,game_id,league_id,mean_off_eff_fg,mean_def_eff_fg,mean_off_tov_perc,mean_def_tov_perc,mean_off_reb_perc,mean_def_reb_perc,mean_off_FTA_Rate,mean_def_FTA_Rate)
Team_2_df <- Team_Stats_df %>%
filter(Team_2 == TRUE) %>%
select(index,game_id,league_id,mean_off_eff_fg,mean_def_eff_fg,mean_off_tov_perc,mean_def_tov_perc,mean_off_reb_perc,mean_def_reb_perc,mean_off_FTA_Rate,mean_def_FTA_Rate)
x1 <- left_join(Team_1_df, Team_2_df, by = c("game_id" = "game_id", "league_id" = "league_id"))
x2 <- left_join(Team_2_df, Team_1_df, by = c("game_id" = "game_id", "league_id" = "league_id"))
x <- rbind(x1,x2)
x <- x[order(x$index.x),]
# Creating y matrix of responses for models
y_df <- Team_Stats_df %>%
select(index,off_eff_fg_GG,def_eff_fg_GG,off_tov_perc_GG,def_tov_perc_GG,off_reb_perc_GG,def_reb_perc_GG,off_FTA_Rate_GG,def_FTA_Rate_GG)
y_df <- y_df[order(y_df$index),]
write.csv(x,'D:/Suns/x.csv')
write.csv(y_df,'D:/Suns/y_df.csv')
write.csv(RM_Game_Goals_df,'D:/Suns/RM_Game_Goals_df.csv')
# create game goals table for Real Madrid's 25th game
RM_Game_Goals_df <- Team_Stats_df %>%
filter(Win == 1, team_id == 'E2018_09', game_date >= as.Date("2018-10-03") & game_date <= as.Date("2019-01-29")) %>%
group_by(team_id) %>%
summarize(mean_off_eff_fg = mean(off_eff_fg),
mean_def_eff_fg = mean(def_eff_fg),
mean_off_tov_perc = mean(off_tov_perc),
mean_def_tov_perc = mean(def_tov_perc),
mean_off_reb_perc = mean(off_reb_perc),
mean_def_reb_perc = mean(def_reb_perc),
mean_off_FTA_Rate = mean(off_FTA_Rate),
mean_def_FTA_Rate = mean(def_FTA_Rate)
)
FI_Game_Goals_df <- Team_Stats_df %>%
filter(Win == 1, team_id == 'E2018_15', game_date >= as.Date("2018-10-03") & game_date <= as.Date("2019-01-29")) %>%
group_by(team_id) %>%
summarize(mean_off_eff_fg = mean(off_eff_fg),
mean_def_eff_fg = mean(def_eff_fg),
mean_off_tov_perc = mean(off_tov_perc),
mean_def_tov_perc = mean(def_tov_perc),
mean_off_reb_perc = mean(off_reb_perc),
mean_def_reb_perc = mean(def_reb_perc),
mean_off_FTA_Rate = mean(off_FTA_Rate),
mean_def_FTA_Rate = mean(def_FTA_Rate)
)
X_RM <- cbind(RM_Game_Goals_df,FI_Game_Goals_df)
y_RM <- y_df %>%
filter(index == 617)
Team_Stats_df %>%
filter(team_id == 'E2018_09', game_date >= as.Date("2018-10-03") & game_date <= as.Date("2019-01-29"))
Team_Stats_df %>%
filter(team_id == 'E2018_09')
Team_Stats_df %>%
filter(game_id == '156')
View(euro_meta_team)
Team_Stats_df %>%
filter(team_id == 'E2018_09') %>%
group_by(team_id) %>%
summarize(game_date,
mean_off_eff_fg = mean(off_eff_fg),
mean_def_eff_fg = mean(def_eff_fg),
mean_off_tov_perc = mean(off_tov_perc),
mean_def_tov_perc = mean(def_tov_perc),
mean_off_reb_perc = mean(off_reb_perc),
mean_def_reb_perc = mean(def_reb_perc),
mean_off_FTA_Rate = mean(off_FTA_Rate),
mean_def_FTA_Rate = mean(def_FTA_Rate)
)
Team_Stats_df %>%
filter(team_id == 'E2018_09') %>%
group_by(game_date) %>%
summarize(mean_off_eff_fg = mean(off_eff_fg),
mean_def_eff_fg = mean(def_eff_fg),
mean_off_tov_perc = mean(off_tov_perc),
mean_def_tov_perc = mean(def_tov_perc),
mean_off_reb_perc = mean(off_reb_perc),
mean_def_reb_perc = mean(def_reb_perc),
mean_off_FTA_Rate = mean(off_FTA_Rate),
mean_def_FTA_Rate = mean(def_FTA_Rate)
)
Team_Stats_df %>%
filter(team_id == 'E2018_09') %>%
group_by(game_date,game_id) %>%
summarize(mean_off_eff_fg = mean(off_eff_fg),
mean_def_eff_fg = mean(def_eff_fg),
mean_off_tov_perc = mean(off_tov_perc),
mean_def_tov_perc = mean(def_tov_perc),
mean_off_reb_perc = mean(off_reb_perc),
mean_def_reb_perc = mean(def_reb_perc),
mean_off_FTA_Rate = mean(off_FTA_Rate),
mean_def_FTA_Rate = mean(def_FTA_Rate)
)
Team_Stats_df %>%
filter(team_id == 'E2018_15') %>%
group_by(game_date,game_id) %>%
summarize(mean_off_eff_fg = mean(off_eff_fg),
mean_def_eff_fg = mean(def_eff_fg),
mean_off_tov_perc = mean(off_tov_perc),
mean_def_tov_perc = mean(def_tov_perc),
mean_off_reb_perc = mean(off_reb_perc),
mean_def_reb_perc = mean(def_reb_perc),
mean_off_FTA_Rate = mean(off_FTA_Rate),
mean_def_FTA_Rate = mean(def_FTA_Rate)
)
Team_Stats_df %>%
filter(team_id == 'E2018_09') %>%
group_by(game_date,game_id) %>%
summarize(mean_off_eff_fg = mean(off_eff_fg),
mean_def_eff_fg = mean(def_eff_fg),
mean_off_tov_perc = mean(off_tov_perc),
mean_def_tov_perc = mean(def_tov_perc),
mean_off_reb_perc = mean(off_reb_perc),
mean_def_reb_perc = mean(def_reb_perc),
mean_off_FTA_Rate = mean(off_FTA_Rate),
mean_def_FTA_Rate = mean(def_FTA_Rate)
)
Team_Stats_df %>%
filter(team_id == 'E2018_15') %>%
group_by(game_date,game_id) %>%
summarize(mean_off_eff_fg = mean(off_eff_fg),
mean_def_eff_fg = mean(def_eff_fg),
mean_off_tov_perc = mean(off_tov_perc),
mean_def_tov_perc = mean(def_tov_perc),
mean_off_reb_perc = mean(off_reb_perc),
mean_def_reb_perc = mean(def_reb_perc),
mean_off_FTA_Rate = mean(off_FTA_Rate),
mean_def_FTA_Rate = mean(def_FTA_Rate)
)
Team_Stats_df %>%
filter(team_id == 'E2018_15') %>%
group_by(index,game_date,game_id) %>%
summarize(mean_off_eff_fg = mean(off_eff_fg),
mean_def_eff_fg = mean(def_eff_fg),
mean_off_tov_perc = mean(off_tov_perc),
mean_def_tov_perc = mean(def_tov_perc),
mean_off_reb_perc = mean(off_reb_perc),
mean_def_reb_perc = mean(def_reb_perc),
mean_off_FTA_Rate = mean(off_FTA_Rate),
mean_def_FTA_Rate = mean(def_FTA_Rate)
)
Team_Stats_df %>%
filter(team_id == 'E2018_09') %>%
group_by(game_date,game_id,index) %>%
summarize(mean_off_eff_fg = mean(off_eff_fg),
mean_def_eff_fg = mean(def_eff_fg),
mean_off_tov_perc = mean(off_tov_perc),
mean_def_tov_perc = mean(def_tov_perc),
mean_off_reb_perc = mean(off_reb_perc),
mean_def_reb_perc = mean(def_reb_perc),
mean_off_FTA_Rate = mean(off_FTA_Rate),
mean_def_FTA_Rate = mean(def_FTA_Rate)
)
write.csv(X_RM,'D:/Suns/X_RM.csv')
write.csv(y_RM,'D:/Suns/y_RM.csv')
install.packages("DataExplorer")
library(astsa)
library(fpp2)
library(tseries)
library(tidyquant)
library(tidyverse)
############################
#Simulating Auto Regressive Model (AR Model)
set.seed(3000)
ar_ts <- arima.sim(list(order = c(1, 0, 0), ar = 0.8), n = 1000)
plot.ts(ar_ts)
acf2(ar_ts)
#Forecasting
sarima.for(ar_ts,p=1,d=0,q=0, n.ahead = 10)
############################
#Simulating Moving Average Model (MA Model)
set.seed(3000)
ma_ts <- arima.sim(list(order = c(0, 0, 1), ma = 0.8), n = 1000)
plot.ts(ma_ts)
acf2(ma_ts)
#Forecasting
sarima.for(ma_ts,p=0,d=0,q=1, n.ahead = 10)
############################
#Simulating Moving Average Model (MA Model)
set.seed(3000)
ma_ts <- arima.sim(list(order = c(0, 0, 1), ma = 0.8), n = 1000)
plot.ts(ma_ts)
acf2(ma_ts)
#Forecasting
sarima.for(ma_ts,p=0,d=0,q=1, n.ahead = 10)
############################
#Simulating Auto Regressive Moving Average Model (ARMA Model)
set.seed(3000)
arma_ts <- arima.sim(list(order = c(1, 0, 1), ar = 0.8, ma = 0.8), n = 1000)
plot.ts(arma_ts)
acf2(arma_ts)
#Forecasting
sarima.for(arma_ts,p=1,d=0,q=1, n.ahead = 10)
acf2(ar_ts)
plot.ts(ar_ts)
############################
#Simulating Auto Regressive Model (AR Model)
set.seed(3000)
ar_ts <- arima.sim(list(order = c(1, 0, 0), ar = 0.8), n = 1000)
plot.ts(ar_ts)
acf2(ar_ts)
############################
#Simulating Auto Regressive Moving Average Model (ARMA Model)
set.seed(3000)
arma_ts <- arima.sim(list(order = c(1, 0, 1), ar = 0.8, ma = 0.8), n = 1000)
plot.ts(arma_ts)
acf2(arma_ts)
############################
#Simulating Auto Regressive Integrated Moving Average Model (ARIMA Model)
set.seed(3000)
arima_ts <- arima.sim(list(order = c(1, 1, 1), ar = 0.8, ma = 0.8), n = 1000)
plot.ts(arima_ts)
plot.ts(diff(arima_ts))
acf2(diff(arima_ts))
#Forecasting
sarima.for(arima_ts,p=1,d=1,q=1, n.ahead = 10)
#########################################################
#Bank of America
#Step 1
#get BAC Price from 12_01_16 through 09_01_17
BAC  <- tq_get("BAC", get = "stock.prices", from = "2016-12-01", to = "2017-09-01")
#plot the time series for BAC Stock Close price
plot.ts(BAC$close)
#Step 2
adf.test(BAC$close)
adf.test(diff(BAC$close))
#Step 3
acf2(diff(BAC$close))
#########################################################
#Bank of America
#Step 1
#get BAC Price from 12_01_16 through 09_01_17
BAC  <- tq_get("BAC", get = "stock.prices", from = "2016-12-01", to = "2017-09-01")
#plot the time series for BAC Stock Close price
plot.ts(BAC$close)
#Step 2
adf.test(BAC$close)
adf.test(diff(BAC$close))
#Step 3
acf2(diff(BAC$close))
#Step 2
adf.test(BAC$close)
adf.test(diff(BAC$close))
#plot the time series for BAC Stock Close price
plot.ts(BAC$close)
#Step 2
adf.test(BAC$close)
adf.test(diff(BAC$close))
#Step 3
acf2(diff(BAC$close))
# #Step 4
# BAC_price_model <- arima(BAC$close,order=c(0,1,0))
# print(BAC_price_model)
# BAC_price_fitted <- BAC$close-residuals(BAC_price_model)
# plot.ts(BAC$close)
# points(BAC_price_fitted,type="l",col="green",lty=3)
#Step 4
#BAC_price_model <- arima(BAC$close,order=c(0,1,0))
BAC_price_model <- sarima(BAC$close,p=0,d=1,q=0)
# globtemp
#Step 1
plot.ts(globtemp)
#Step 2
plot.ts(diff(globtemp))
adf.test(globtemp)
adf.test(diff(globtemp))
#Step 3
acf2(diff(globtemp))
#Step 4
m1 <- sarima(globtemp,p=1,d=1,q=1)
m1$ttable
m1$AIC
m1$BIC
m2 <- sarima(globtemp,p=1,d=1,q=2)
m2$ttable
m2$AIC
m2$BIC
m3 <- sarima(globtemp,p=1,d=1,q=3)
m3$ttable
m3$AIC
m3$BIC
m4 <- sarima(globtemp,p=2,d=1,q=2)
m4$ttable
m4$AIC
m4$BIC
#Step 4 alternative way
auto.arima(globtemp)
#Step 5
#looks like m3 is the best fit
sarima.for(globtemp, p=1,d=1,q=3, n.ahead = 5)
#Step 4 alternative way
auto.arima(globtemp)
# Dynamic Regression
# Forecast Consumption using Income as a predictor variable
# i.e. Fit ARIMA model for Consumption + regress on Income
# Step 1
# US consumption vs US Income
data("uschange")
#autoplot(uschange[,c("Consumption","Income")])
autoplot(uschange[,c("Consumption","Income")],facets = TRUE)
# Lets look at a scatter plot
ggplot(aes(x=Income,y=Consumption), data = as.data.frame(uschange)) + geom_point()
#Step 2
#(kindly note, both the variables have to fulfill stationarity condition)
plot.ts(uschange[,"Income"])
plot.ts(uschange[,"Consumption"])
adf.test(uschange[,"Income"])
adf.test(uschange[,"Consumption"])
# Step 3 (auto.arima)
auto.arima(uschange[, "Consumption"], xreg = uschange[, "Income"])
#(1,0,2)
#acf2(uschange[, "Consumption"], xreg = uschange[, "Income"])
#Step 4
#fit the model, check for model fit i.e. if residuals are white noise and the regressor value
fit <- sarima(uschange[, "Consumption"], xreg = uschange[, "Income"],p=1,d=0,q=2)
#What does consumption change by for each unit increase in Income
fit$ttable #focus on estimate of xreg
# Forecast consumption assuming that the incoome is going to be 1 for the next 6 time periods
sarima.for(uschange[, "Consumption"], xreg = uschange[, "Income"],p=1,d=0,q=2,newxreg = rep(1,6),n.ahead = 6)
# forecast consumption if the next 6 incomes are x=c(1,0.5,2,1.3,2,1)
newx = c(1,0.5,2,1.3,2,1)
sarima.for(uschange[, "Consumption"], xreg = uschange[, "Income"],p=1,d=0,q=2,newxreg = newx,n.ahead = 6)
#autoplot(uschange[,c("Consumption","Income")])
autoplot(uschange[,c("Consumption","Income")],facets = TRUE)
# Lets look at a scatter plot
ggplot(aes(x=Income,y=Consumption), data = as.data.frame(uschange)) + geom_point()
library(nbastatR)
library(factoextra)
library(plotly)
library(stats)
library(ggplot2)
library(plotly)
DC <- draft_combines(years = 2010:2020) # Select draft years desired
sum(is.na(DC))/prod(dim(DC))
test <- DC %>% summarise_all(list(name = ~sum(is.na(.))/length(.)))
DC <- DC[,1:20]
RowID <- c(1628404,1628417,1628453,1628502,1628959,
1628968,1628977,1628981,1628986,1628998,
1629004,1629005,1629021,1629025)
excl_duplicates <- DC[!DC$idPlayer %in% RowID,]
duplicates <- DC[DC$idPlayer %in% RowID,]
duplicates <- cbind(Unique = rownames(duplicates),duplicates)
duplicates$Test <- ifelse(grepl(".1", duplicates$Unique, fixed = TRUE), "yes", "no")
duplicates <- duplicates[duplicates$Test == 'yes',]
duplicates <- duplicates[-c(1,12)]
row.names(duplicates) <- NULL
DC <- rbind(excl_duplicates,duplicates)
DC$HeightWingspanDiff <- DC$heightWOShoesInches - DC$wingspanInches
keeps <- c("yearCombine","idPlayer","nameFirst","nameLast","namePlayer","slugPosition",
"HeightWingspanDiff","pctBodyFat","verticalLeapMaxInches","timeLaneAgility")
DC <- DC[keeps]
DC <- na.omit(DC) # Cleaned DataFrame
measurements.DC <- scale(DC[7:10])
rownames(measurements.DC) <- paste0(DC$idPlayer)
res.pca <- prcomp(measurements.DC, scale = TRUE)
pca.comps <- res.pca$x
DC <- cbind(DC,pca.comps)
set.seed(123)
km.res <- kmeans(DC[,11:12], 4, nstart = 25)
DC$Clusters <- km.res$cluster
p <- ggplot(DC, aes(x=PC1, y=PC2)) +
geom_point()
p
ggplotly(p)
fig <- plot_ly(data = DC, x = PC1, y = PC2)
fig
fig <- plot_ly(data = DC, x = PC1, y = PC2)
fig
fig <- plot_ly(data = DC, x = ~PC1, y = ~PC2)
fig
p <- ggplot(DC, aes(x=PC1, y=PC2)) +
geom_point()
p
ggplotly(p)
data("iris")
data("iris")
my_plot <- ggplot() + geom_point(data = iris, aes(x = Petal.Width, y = Petal.Length, color = Species)) +
xlab("Petal Width (cm)")  + ylab("Petal Length (cm)") + theme(plot.title = element_text(hjust = 0.5))
my_plot
ggplotly(my_plot)
sessionInfo()
shiny::runApp('NBA_Draft_2020')
runApp('NBA_Draft_2020')
master_df$Class
runApp('NBA_Draft_2020')
runApp('NBA_Draft_2020')
master_df$Class
runApp('NBA_Draft_2020')
runApp('NBA_Draft_2020')
runApp('NBA_Draft_2020')
runApp('NBA_Draft_2020')
runApp('NBA_Draft_2020')
runApp('NBA_Draft_2020')
runApp()
runApp('NBA_Draft_2020')
runApp('NBA_Draft_2020')
runApp('NBA_Draft_2020')
runApp('NBA_Draft_2020')
runApp('NBA_Draft_2020')
runApp('NBA_Draft_2020')
runApp()
setwd("~/NBA_Draft_2020")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
str_contains(colnames(master_df),"2P")
str_contains(colnames(master_df),"2P")
setwd("~/NBA_Draft_2020")
str_contains(colnames(master_df),"2P")
sjmisc::str_contains(colnames(master_df),"2P")
grep("2P",colnames(master_df))
grep("2P",colnames(master_df),value = TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
colnames(master_df)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
